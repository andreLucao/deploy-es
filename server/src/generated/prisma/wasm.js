
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.EmissionProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unit: 'unit',
  scope: 'scope',
  createdAt: 'createdAt'
};

exports.Prisma.EmissionFactorScalarFieldEnum = {
  id: 'id',
  emissionProductId: 'emissionProductId',
  region: 'region',
  year: 'year',
  factorValue: 'factorValue',
  createdAt: 'createdAt'
};

exports.Prisma.EmissionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  emissionProductId: 'emissionProductId',
  year: 'year',
  quantity: 'quantity',
  calculatedCo2e: 'calculatedCo2e',
  registeredAt: 'registeredAt',
  createdAt: 'createdAt',
  description: 'description'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Company: 'Company',
  EmissionProduct: 'EmissionProduct',
  EmissionFactor: 'EmissionFactor',
  Emission: 'Emission'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/lucadeandrade/Desktop/es/server/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/lucadeandrade/Desktop/es/server/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Company {\n  id        String     @id @default(uuid())\n  email     String     @unique\n  emissions Emission[]\n\n  @@map(\"companies\")\n}\n\nmodel EmissionProduct {\n  id        String   @id @default(uuid())\n  name      String   @unique\n  unit      String\n  scope     String?\n  createdAt DateTime @default(now()) @map(\"created_at\")\n\n  emissionFactors EmissionFactor[]\n  emissions       Emission[]\n\n  @@map(\"emission_products\")\n}\n\nmodel EmissionFactor {\n  id                String   @id @default(uuid())\n  emissionProductId String   @map(\"emission_product_id\")\n  region            String?\n  year              Int?\n  factorValue       Float    @map(\"factor_value\")\n  createdAt         DateTime @default(now()) @map(\"created_at\")\n\n  emissionProduct EmissionProduct @relation(fields: [emissionProductId], references: [id])\n\n  @@map(\"emission_factors\")\n}\n\nmodel Emission {\n  id String @id @default(uuid())\n\n  companyId         String @map(\"company_id\")\n  emissionProductId String @map(\"emission_product_id\")\n\n  year           Int\n  quantity       Int\n  calculatedCo2e Float     @map(\"calculated_co2e\")\n  registeredAt   DateTime? @map(\"registered_at\")\n  createdAt      DateTime  @default(now()) @map(\"created_at\")\n  description    String?\n\n  company         Company         @relation(fields: [companyId], references: [id])\n  emissionProduct EmissionProduct @relation(fields: [emissionProductId], references: [id])\n\n  @@unique([companyId, emissionProductId, year])\n  @@map(\"emissions\")\n}\n",
  "inlineSchemaHash": "f0900b751e9efba9196d2040b7ba9ff01d49020a7afab1ac17bf4fbd7dd97a0e",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Company\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emissions\",\"kind\":\"object\",\"type\":\"Emission\",\"relationName\":\"CompanyToEmission\"}],\"dbName\":\"companies\"},\"EmissionProduct\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unit\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"emissionFactors\",\"kind\":\"object\",\"type\":\"EmissionFactor\",\"relationName\":\"EmissionFactorToEmissionProduct\"},{\"name\":\"emissions\",\"kind\":\"object\",\"type\":\"Emission\",\"relationName\":\"EmissionToEmissionProduct\"}],\"dbName\":\"emission_products\"},\"EmissionFactor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emissionProductId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"emission_product_id\"},{\"name\":\"region\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"factorValue\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"factor_value\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"emissionProduct\",\"kind\":\"object\",\"type\":\"EmissionProduct\",\"relationName\":\"EmissionFactorToEmissionProduct\"}],\"dbName\":\"emission_factors\"},\"Emission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"company_id\"},{\"name\":\"emissionProductId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"emission_product_id\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"calculatedCo2e\",\"kind\":\"scalar\",\"type\":\"Float\",\"dbName\":\"calculated_co2e\"},{\"name\":\"registeredAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"registered_at\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToEmission\"},{\"name\":\"emissionProduct\",\"kind\":\"object\",\"type\":\"EmissionProduct\",\"relationName\":\"EmissionToEmissionProduct\"}],\"dbName\":\"emissions\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)


generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id    String @id @default(uuid())
  email String @unique

  stripeCustomerId String? @unique @map("stripe_customer_id")

  balance    Int @default(0)
  adProducts AdProduct[]
  comments   Comment[]
  commentLikes CommentLike[]

  cart       Cart?
  orders     Order[]
  payments   Payment[]
  inventories EmissionInventory[]

  @@map("companies")
}

model EmissionProduct {
  id        String   @id @default(uuid())
  name      String   @unique
  unit      String
  scope     String?
  createdAt DateTime @default(now()) @map("created_at")

  emissionFactors EmissionFactor[]
  emissions       Emission[]

  @@map("emission_products")
}

model EmissionFactor {
  id                String   @id @default(uuid())
  emissionProductId String   @map("emission_product_id")
  region            String?
  year              Int?
  factorValue       Float    @map("factor_value")
  createdAt         DateTime @default(now()) @map("created_at")

  emissionProduct EmissionProduct @relation(fields: [emissionProductId], references: [id])

  @@map("emission_factors")
}

model Emission {
  id String @id @default(uuid())

  scope        Int       // 1, 2, 3
  emissionType String    // "combustao_movel", "eletricidade", etc.
  formData     Json?     // JSON com os dados do formulário da calculadora
  deletedAt    DateTime? @map("deleted_at") // Pro soft delete

  inventoryId       String @map("inventory_id")
  emissionProductId String @map("emission_product_id")

  quantity       Int
  calculatedCo2e Float     @map("calculated_co2e")
  registeredAt   DateTime? @map("registered_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  description    String?

  inventory       EmissionInventory @relation(fields: [inventoryId], references: [id])
  emissionProduct EmissionProduct @relation(fields: [emissionProductId], references: [id])

  @@unique([inventoryId, emissionProductId]) // Evita duplicar um produto no mesmo inventário
  @@map("emissions")
}

model AdProduct {
  id                 String   @id @default(uuid())
  title              String   @unique
  credit_type        String   @map("credit_type")
  certification_type String   @map("certification_type")
  price              Int      @map("price") // Armazenado em centavos, R$ 99,90 = 9990
  createdAt          DateTime @default(now()) @map("created_at")
  description        String   @map("description")
  supply             Int      @map("supply")
  batch_discount     Float    @map("batch_discount")
  size_batch         Int      @map("size_batch")
  image_ad           String?  @map("image_ad")
  carousel_images    Json?    @map("carousel_images")
  verified_stamp     Boolean? @map("verified_stamp")
  active             Boolean? @map("active")
  problem            String?  @map("problem")
  solution           String?  @map("solution")
  impact             String?  @map("impact")
  co2_reduction      Float?   @map("co2_reduction")
  local              String?  @map("local")
  status             String   @map("status") @default("pending")
  standard           String?  @map("standard")
  biome              String?  @map("biome")
  project_type       String?  @map("project_type")
  sold               Int?     @map("sold")

  companyId          String   @map("company_id")

  company Company   @relation(fields: [companyId], references: [id])
  comments Comment[]

  cartItems          CartItem[]
  orderItems         OrderItem[]
  payments           Payment[]

  @@map("ad_product")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  adProductId String @map("ad_product_id")
  companyId   String @map("company_id")

  adProduct AdProduct    @relation(fields: [adProductId], references: [id])
  company   Company      @relation(fields: [companyId], references: [id])
  likes     CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  commentId String @map("comment_id")
  companyId String @map("company_id")

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id])

  @@unique([commentId, companyId]) // Evita likes duplicados
  @@map("comment_likes")
}

model Cart {
  id        String   @id @default(uuid())
  companyId String   @unique @map("company_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company   Company    @relation(fields: [companyId], references: [id])
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id          String   @id @default(uuid())
  cartId      String   @map("cart_id")
  adProductId String   @map("ad_product_id")
  quantity    Int
  addedAt     DateTime @default(now()) @map("added_at")

  cart        Cart      @relation(fields: [cartId], references: [id])
  adProduct   AdProduct @relation(fields: [adProductId], references: [id])

  @@unique([cartId, adProductId]) // Evita duplicatas no carrinho
  @@map("cart_items")
}

model Order {
  id          String      @id @default(uuid())
  companyId   String      @map("company_id")
  totalAmount Int         @map("total_amount") // Armazenado em centavos, R$ 99,90 = 9990
  status      OrderStatus
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  company     Company     @relation(fields: [companyId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String @id @default(uuid())
  orderId     String @map("order_id")
  adProductId String @map("ad_product_id")
  quantity    Int
  unitPrice   Int  @map("unit_price") // Preço unitário no momento da compra
  totalPrice  Int  @map("total_price") // quantity * unitPrice

  order       Order     @relation(fields: [orderId], references: [id])
  adProduct   AdProduct @relation(fields: [adProductId], references: [id])

  @@map("order_items")
}

model Payment {
  id                      String        @id @default(uuid())
  adId                    String        @map("ad_id")
  companyId               String        @map("company_id")

  amount                  Int           // Armazenado em centavos, R$ 99,90 = 9990
  currency                String        @default("brl") // ex: "brl", "usd"
  creditsBought           Int           @map("credits_bought")

  paymentMethod           String?       @map("payment_method") // ex: "card", "pix"
  stripePaymentIntentId   String?       @unique @map("stripe_payment_intent_id")

  createdAt               DateTime      @default(now()) @map("created_at")

  adProduct               AdProduct     @relation(fields: [adId], references: [id])
  company                 Company       @relation(fields: [companyId], references: [id])

  @@map("payments")
}

enum OrderStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  REQUIRES_ACTION // Requer ação adicional (3D Secure, etc.)
  SUCCEEDED
  FAILED
  CANCELLED
}

model EmissionInventory {
  id        String    @id @default(uuid())
  companyId String    @map("company_id")
  year      Int
  name      String    // Ex: "Inventário Anual 2024"
  status    InventoryStatus @default(DRAFT) // (DRAFT, PUBLISHED, etc.)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  company   Company     @relation(fields: [companyId], references: [id])
  emissions Emission[]  // Cada inventário possui seus registros de emissão

  @@unique([companyId, year]) // Pra garantir que cada empresa só tenha um inventário por ano
  @@map("emission_inventories")
}

enum InventoryStatus {
  DRAFT     // Rascunho, está sendo editado
  PUBLISHED // Foi finalizado e publicado
  AUDITED   // O inventário foi auditado (algo futuro, verificado por terceiros...)
}
